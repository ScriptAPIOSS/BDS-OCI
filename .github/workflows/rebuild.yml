name: Rebuild
run-name: Rebuilding all images
on:
  workflow_dispatch:
jobs:
  FindVersions:
    name: Find Versions
    outputs:
      STABLE: ${{ steps.versions.outputs.STABLE }}
      VERSIONS: ${{ steps.versions.outputs.VERSIONS }}
      VERSIONS_MATRIX: ${{ steps.versions.outputs.VERSIONS_MATRIX }}
    runs-on: ubuntu-latest

    steps:
      - name: "Call versions endpoint"
        uses: indiesdev/curl@v1.1
        id: versions_json
        with:
          url: https://raw.githubusercontent.com/ScriptAPIOSS/BDS-Versions/main/versions.json
          method: "GET"
          accept: 200
          log-response: true

      - name: Extract linux versions
        id: versions
        run: |
          STABLE=`echo '${{ steps.versions_json.outputs.response }}' | jq -r '.data.linux.stable'`
          VERSIONS=`echo '${{ steps.versions_json.outputs.response }}' | jq -r --arg stable "$STABLE" '.data.linux.versions | del(.[] | select(. == ($stable))) | .[]'`
          VERSIONS_MATRIX=`echo '${{ steps.versions_json.outputs.response }}' | jq -c --arg stable "$STABLE" '.data.linux.versions | del(.[] | select(. == ($stable)))'`

          echo "::set-output name=STABLE::${STABLE}"
          echo "::set-output name=VERSIONS::${VERSIONS}"
          echo "::set-output name=VERSIONS_MATRIX::${VERSIONS_MATRIX}"

      - name: Output to summary
        run: |
          echo "Stable: \`${{ steps.versions.outputs.STABLE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "Versions:" >> $GITHUB_STEP_SUMMARY
          for v in ${{ steps.versions.outputs.VERSIONS }}; do
            echo " - $v" >> $GITHUB_STEP_SUMMARY
          done

  IssueRebuildStable:
    name: Rebuild stable BDS
    runs-on: ubuntu-latest
    needs: FindVersions
    steps:
      - name: Get app token
        id: get_bot_token
        uses: machine-learning-apps/actions-app-token@master
        with:
          APP_PEM: ${{ secrets.BDS_APP_PEM }}
          APP_ID: ${{ secrets.BDS_APP_ID }}
      - name: Trigger stable build
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get_bot_token.outputs.app_token }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'ScriptAPIOSS',
              repo: 'BDS-OCI',
              workflow_id: 'build.yml',
              ref: 'main',
              inputs: {
                BDS_VERSION: '${{ needs.FindVersions.outputs.STABLE }}',
                USE_LATEST_TAG: "true"
              }
            })

  IssueRebuildsOld:
    name: Rebuild old BDS
    runs-on: ubuntu-latest
    if: needs.FindVersions.outputs.VERSIONS_MATRIX != '[]'
    strategy:
      matrix:
        version: ${{ fromJson(needs.FindVersions.outputs.VERSIONS_MATRIX) }}

    needs: FindVersions
    steps:
      - name: Get app token
        id: get_bot_token
        uses: machine-learning-apps/actions-app-token@master
        with:
          APP_PEM: ${{ secrets.BDS_APP_PEM }}
          APP_ID: ${{ secrets.BDS_APP_ID }}
      - name: Trigger build [${{ matrix.version }}]
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get_bot_token.outputs.app_token }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'ScriptAPIOSS',
              repo: 'BDS-OCI',
              workflow_id: 'build.yml',
              ref: 'main',
              inputs: {
                BDS_VERSION: '${{ matrix.version }}',
                USE_LATEST_TAG: "false"
              }
            })
